#!/usr/bin/env python3

import multiprocessing
import os
import sys

# Get server configuration from environment variables
cpu_count = multiprocessing.cpu_count()
model_server_timeout = os.environ.get('MODEL_SERVER_TIMEOUT', 60)
model_server_workers = int(os.environ.get('MODEL_SERVER_WORKERS', cpu_count))

def start_server():
    """
    Configures and launches the Gunicorn server.
    """
    print(f"Starting the inference server with {model_server_workers} workers.")
    print(f"Server timeout is set to {model_server_timeout} seconds.")

    # --- Gunicorn command arguments ---
    # We use os.execvp to replace the current process with Gunicorn.
    # This is a best practice for container entrypoints.
    gunicorn_args = [
        'gunicorn',
        '--timeout', str(model_server_timeout),
        '--bind', '0.0.0.0:8080',  # Bind to all network interfaces on port 8080
        '--workers', str(model_server_workers),
        '--worker-class', 'uvicorn.workers.UvicornWorker', # Use Uvicorn for asyncio (FastAPI)
        'predictor:app' # Assumes your FastAPI file is predictor.py and the app is named 'app'
    ]

    print(f"Launching Gunicorn with command: {' '.join(gunicorn_args)}")
    
    # Replace the current process with the Gunicorn process
    os.execvp('gunicorn', gunicorn_args)

if __name__ == '__main__':
    start_server()
